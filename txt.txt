Claro, aqui está uma sequência organizada de comandos para criar, ativar, usar e desativar um ambiente virtual Python:

1. **Criar o ambiente virtual em um diretório onde você tem permissões adequadas (por exemplo, seu diretório home):**

```bash
cd ~
python3 -m venv venv
```

2. **Ativar o ambiente virtual:**

```bash
source ~/venv/bin/activate
```

3. **Navegar até o diretório do seu projeto:**

```bash
cd /media/achilles/Projetos/Arquivos/rocket
```

4. **Instalar as dependências do projeto (se houver um arquivo `requirements.txt`):**

```bash
pip install -r requirements.txt
```

5. **Trabalhar no seu projeto (executar scripts, desenvolver, etc.).**

6. **Desativar o ambiente virtual quando terminar:**

```bash
deactivate
```

7. **Se houver trabalhos parados, listá-los:**

```bash
jobs
```

8. **Trazer um trabalho para o primeiro plano e encerrá-lo (se necessário):**

```bash
fg %1
```

9. **Sair do shell (se necessário):**

```bash
exit
```

Essa sequência deve ajudá-lo a manter um fluxo de trabalho organizado ao usar ambientes virtuais Python.PYTHONPATH=src pytest -s -v src/model/repositories/subscribers_repository_test.py


PYTHONPATH=src pytest -s -v src/model/repositories/subscribers_repository_test.py


pytest -s -v src/model/repositories/subscribers_repository_test.py



pip3 install pytest
pip3 freeze > requirements.txt


python3
import sqlite3
sqlite3.connect('schema.db')

Para parar os processos Python que estão escutando na porta 3000, você pode usar o comando `kill` com os PIDs dos processos. Aqui estão os comandos para parar esses processos:

```sh
kill 210890
kill 233702
```

Se você quiser garantir que todos os processos Python que estão escutando na porta 3000 sejam parados, você pode usar o seguinte comando:

```sh
fuser -k 3000/tcp
```

Isso irá matar todos os processos que estão usando a porta 3000.
fuser -k 3000/tcp

kill 210890
kill 233702